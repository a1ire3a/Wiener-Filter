# -*- coding: utf-8 -*-
"""Wiener filter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ia7-_3J0b1eZj53qdeictW-9JhuTbq0k
"""

import numpy as np
import cv2
import urllib.request as url
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow
from skimage.util import random_noise
from scipy.signal import gaussian, convolve2d, wiener
from sklearn.metrics import mean_squared_error

"""READ IMAGE"""

req = url.urlopen("https://images.freeimages.com/images/large-previews/0da/manhattan-bridge-1-1170775.jpg")
imgArr = np.asarray(bytearray(req.read()), dtype=np.uint8)
img = cv2.imdecode(imgArr, cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (int(img.shape[1]/2),int(img.shape[0]/2)))
cv2_imshow(img)

"""ADD NOISE"""

gaussianIMG = 255 * random_noise(img, mode='gaussian', seed=None, clip=True)
cv2_imshow(gaussianIMG)

"""WIENER FILTER"""

def wiener_filter(img, kernel, K):
	kernel /= np.sum(kernel)
	dummy = np.copy(img)
	dummy = np.fft.fft2(dummy)
	kernel = np.fft.fft2(kernel, s = img.shape)
	kernel = np.conj(kernel) / (np.abs(kernel) ** 2 + K)
	dummy = dummy * kernel
	dummy = np.abs(np.fft.ifft2(dummy))
	return dummy

def gaussian_kernel(kernel_size = 3):
	h = gaussian(kernel_size, kernel_size / 3).reshape(kernel_size, 1)
	h = np.dot(h, h.transpose())
	h /= np.sum(h)
	return h

kernel = gaussian_kernel(3)
filtered_img = 255 * wiener_filter(gaussianIMG, kernel, 0)
min = mean_squared_error(img, filtered_img)
for K in range(5,2000, 5):
  filtered_img = 255 * wiener_filter(gaussianIMG, kernel, K)
  mse = mean_squared_error(img, filtered_img)
  if mse < min:
      best_k = K
      min = mse

filtered_img = 255 * wiener_filter(gaussianIMG, kernel, best_k)
print(best_k, min)
cv2_imshow(filtered_img)

"""test 2"""

req = url.urlopen("https://images.freeimages.com/images/large-previews/e36/baby-1432706.jpg")
imgArr = np.asarray(bytearray(req.read()), dtype=np.uint8)
img = cv2.imdecode(imgArr, cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (int(img.shape[1]/2),int(img.shape[0]/2)))
gaussianIMG = 255 * random_noise(img, mode='gaussian', seed=None, clip=True)
kernel = gaussian_kernel(3)
filtered_img = 255 * wiener_filter(gaussianIMG, kernel, 0)
min = mean_squared_error(img, filtered_img)
for K in range(5,2000, 5):
  filtered_img = 255 * wiener_filter(gaussianIMG, kernel, K)
  mse = mean_squared_error(img, filtered_img)
  if mse < min:
      best_k = K
      min = mse
filtered_img = 255 * wiener_filter(gaussianIMG, kernel, best_k)
print(best_k, min)
cv2_imshow(img)
cv2_imshow(gaussianIMG)
cv2_imshow(filtered_img)

"""test 3"""

req = url.urlopen("https://images.freeimages.com/images/large-previews/72e/moon-1532310.jpg")
imgArr = np.asarray(bytearray(req.read()), dtype=np.uint8)
img = cv2.imdecode(imgArr, cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (int(img.shape[1]/2),int(img.shape[0]/2)))
gaussianIMG = 255 * random_noise(img, mode='gaussian', seed=None, clip=True)
kernel = gaussian_kernel(3)
filtered_img = 255 * wiener_filter(gaussianIMG, kernel, 0)
min = mean_squared_error(img, filtered_img)
for K in range(5,2000, 5):
  filtered_img = 255 * wiener_filter(gaussianIMG, kernel, K)
  mse = mean_squared_error(img, filtered_img)
  if mse < min:
      best_k = K
      min = mse
filtered_img = 255 * wiener_filter(gaussianIMG, kernel, best_k)
print(best_k, min)
cv2_imshow(img)
cv2_imshow(gaussianIMG)
cv2_imshow(filtered_img)